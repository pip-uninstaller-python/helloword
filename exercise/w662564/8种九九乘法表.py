#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Time    : 2019/7/28 13:27
# @Author  : 錵滊嫣缘
# @File    : 8种九九乘法表.py
# @Software: PyCharm

# 打印一个分割线表示下列打印是那种方法 这里的"="*30 就是打印30次等号
print('=' * 30, 'for循环第一种方法(左下角)', '=' * 30)
'''利用for 循环遍历从1~9 这9个数字,这里写10是因为range()函数包含起始位置但是不包含结束位置想要拿到9 
   就必须是9+1的结束位置所以是10'''
for  i in range(1, 10):
    #因为这里是2个数相乘所以定义一个j去遍历从1开始到i+1位置结束的循环产生数
    for j in  range(1,i+1):
        #打印输出 从j和i的乘积，不换行
        print('{}*{}={:<4}'.format(j,i,i*j),end='')
    #打印一个回车，继续循环直到循环结束
    print()


# 打印一个分割线表示下列打印是那种方法 这里的"="*30 就是打印30次等号
print('=' * 30, 'for循环第二种方法(左上角)', '=' * 30)
'''利用for 循环遍历从9~1 这9个数字,这里写0是因为range()函数包含起始位置但是不包含结束位置想要拿到1 
   就必须是1-1的结束位置所以是0，这里的-1 表示反向步长，意思就是从9开始每次减去1的数'''
for  i in range(9,0,-1):
    # 因为这里是2个数相乘所以定义一个j去遍历从1开始到i+1位置结束的循环产生数
    for j in  range(1,i+1):
        # 打印输出 从j和i的乘积，不换行
        print('{}*{}={:<4}'.format(j,i,i*j),end='')
    # 打印一个回车，继续循环直到循环结束
    print()


# 打印一个分割线表示下列打印是那种方法 这里的"="*30 就是打印30次等号
print('=' * 30, 'for循环第三种方法(右下角)', '=' * 30)
'''利用for 循环遍历从1~9 这9个数字,这里写10是因为range()函数包含起始位置但是不包含结束位置想要拿到9 
   就必须是9+1的结束位置所以是10'''
for i in range(1, 10):
    #用k 去遍历从1~10-i的位置，比如说i第一循环的时候是1那么就是从1~8的数，循环打印空格占位
    for k in range(1, 10-i):
        print(end='        ')
     # 因为这里是2个数相乘所以定义一个j去遍历从1开始到i+1位置结束的循环产生数
    for j in range(i, 0, -1):
        # 打印输出 从j和i的乘积，不换行
        print('{}*{}={:<4}'.format(j, i, i * j), end='')
    # 打印一个回车，继续循环直到循环结束
    print()


# 打印一个分割线表示下列打印是那种方法 这里的"="*30 就是打印30次等号
print('=' * 30, 'for循环第四种方法(右上角)', '=' * 30)
'''利用for 循环遍历从9~1 这9个数字,这里写0是因为range()函数包含起始位置但是不包含结束位置想要拿到1 
   就必须是1-1的结束位置所以是0，这里的-1 表示反向步长，意思就是从9开始每次减去1的数'''
for  i in range(9,0,-1):
    # 用K 去遍历从1~10-i的位置，比如说i第一循环的时候是1那么就是从1~8的数，循环打印空格占位
    for k in  range(1,10-i):
        print(end='        ')
    # 因为这里是2个数相乘所以定义一个j去遍历从开始到0位置结束的循环产生数，这里就不在叙述为啥是0
    for j in range(i,0,-1):
        # 打印输出 从j和i的乘积，不换行
        print('{}*{}={:<4}'.format(j,i,i*j),end='')
    # 打印一个回车，继续循环直到循环结束
    print()


# 打印一个分割线表示下列打印是那种方法 这里的"="*30 就是打印30次等号
print('=' * 30, 'while循环第一种方法(左下角)', '=' * 30)
#定义一个变量i 赋初值 1
i=1
#判断i是否为包含9以为的数字，满足条件执行内部的操作
while i<=9:
    # 定义一个变量j赋初值1 同样这里我们乘积数所以必须有乘数和被乘数
    j = 1
    # 判断j的值是否小于等于i，是的情况就执行下面的程序否则结束循环
    while j<=i:
        #打印乘积
        print('{}*{}={:<4}'.format(j,i,i*j),end='')
        # j进行自增1的操作，直到上面的循环不满足结束循环
        j +=1
    # 打印一个回车
    print()
    # i进行自增1的操作，直到循环不满足结束循环
    i += 1


# 打印一个分割线表示下列打印是那种方法 这里的"="*30 就是打印30次等号
print('=' * 30, 'while循环第二种方法(左上角)', '=' * 30)
#定义一个变量i 赋初值 9
i = 9
#循环的判断条件，当i>=1的情况下执行循环内部的操作
while i >= 1:
    # 定义一个变量i 赋初值 1
    j = 1
    #循环的判断条件，当j<=i的情况下执行循环内部的操作
    while j <= i:
        # 打印乘积
        print('{}*{}={:<4}'.format(j,i,i*j),end='')
        # j进行自增1的操作，直到上面的循环不满足结束循环
        j +=1
    # 打印一个回车
    print()
    # i进行自减1的操作，直到循环不满足结束循环
    i -= 1


# 打印一个分割线表示下列打印是那种方法 这里的"="*30 就是打印30次等号
print('=' * 30, 'while循环第三种方法(右下角)', '=' * 30)
#定义一个变量i 赋初值 1
i=1
#循环的判断条件，当i<=9的情况下执行循环内部的操作
while i<=9 :
    # 定义一个变量j 将i的值赋给j
    j = i
    # 定义一个变量k 赋初值 9
    k = 9
    # 循环的判断条件，当k>i的情况下执行循环内部的操作
    while k > i:
        # 打印空格占位
        print('        ', end='')
        # 变量k进行自减操作直到循环判断条件不成了结束循环
        k-=1
     # 循环的判断条件，当j>0的情况下执行循环内部的操作
    while j > 0:
        # 循环打印乘积
        print('{}*{}={:<4}'.format(j,i,i*j),end='')
        # j进行自减1的操作，直到上面的循环不满足结束循环
        j -= 1
    # 打印一个回车
    print()
    # i进行自增1的操作，直到循环不满足结束循环
    i += 1


# 打印一个分割线表示下列打印是那种方法 这里的"="*30 就是打印30次等号
print('=' * 30, 'while循环第四种方法(右上角)', '=' * 30)
#定义一个变量i 赋初值 9
i = 9
#循环的判断条件，当i>=1的情况下执行循环内部的操作
while i >= 1:
    # 定义一个变量j 将i的值赋给j
    j = i
    # 定义一个变量j 赋初值 9
    k = 9
    # 循环的判断条件，当k>i的情况下执行循环内部的操作
    while k > i and k > 0:
        # 打印空格占位
        print('        ', end='')
        # 变量k进行自减操作直到循环判断条件不成了结束循环
        k -= 1
    # 循环的判断条件，当j>0的情况下执行循环内部的操作
    while j > 0:
        ''' 循环打印乘积'''
        print('{}*{}={:<4}'.format(j, i, i * j), end='')
        # j进行自减1的操作，直到上面的循环不满足结束循环
        j -= 1
    # 打印一个回车
    print()
    # i进行自减1的操作，直到循环不满足结束循环
    i -= 1
print('='*100)